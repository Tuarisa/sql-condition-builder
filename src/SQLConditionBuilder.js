// Generated by CoffeeScript 1.6.3
(function() {
  var SQLConditionBuilder, squel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  squel = require('squel');

  SQLConditionBuilder = (function(_super) {
    __extends(SQLConditionBuilder, _super);

    function SQLConditionBuilder() {
      var _this = this;
      SQLConditionBuilder.__super__.constructor.apply(this, arguments);
      this.valueFormatters = [];
      this.registerValueFormatter(null, function(value) {
        return 'IS NULL';
      });
      this.registerValueFormatter('null', function(value) {
        return 'IS NULL';
      });
      this.registerValueFormatter('!null', function(value) {
        return 'IS NOT NULL';
      });
      this.registerValueFormatter('>=', function(value) {
        return ">= " + _this._escapeValue(value.substring(2));
      });
      this.registerValueFormatter('>', function(value) {
        return "> " + _this._escapeValue(value.substring(1));
      });
      this.registerValueFormatter('<=', function(value) {
        return "<= " + _this._escapeValue(value.substring(2));
      });
      this.registerValueFormatter('<', function(value) {
        return "< " + _this._escapeValue(value.substring(1));
      });
      this.registerValueFormatter('!', function(value) {
        return "<> " + _this._escapeValue(value.substring(1));
      });
      this.registerValueFormatter(/[\*\?]+/, function(value) {
        return "LIKE " + _this._escapeValue(value.replace(/\*/g, '%').replace(/\?/, '_'));
      });
      this.registerValueFormatter(/\[.+ TO .+\]/, function(value) {
        var splitted;
        splitted = value.substring(1, value.length - 1).split(' TO ');
        return "BETWEEN " + _this._escapeValue(splitted[0]) + " AND " + _this._escapeValue(splitted[1]);
      });
    }

    SQLConditionBuilder.prototype.build = function(object) {
      var expr;
      expr = this.getExpression(object);
      return expr.toString();
    };

    SQLConditionBuilder.prototype.getExpression = function(objectOrArray) {
      var expr;
      expr = squel.expr();
      if (Array.isArray(objectOrArray)) {
        this._buildExpressionWithArray(expr, objectOrArray);
      } else {
        this._buildExpressionWithObject(expr, objectOrArray);
      }
      return expr;
    };

    SQLConditionBuilder.prototype._buildExpressionWithArray = function(expr, array) {
      var value, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        value = array[_i];
        if (value instanceof Object) {
          expr.or_begin();
          expr.or(this.build(value));
          _results.push(expr.end());
        } else {
          _results.push(expr.or(value));
        }
      }
      return _results;
    };

    SQLConditionBuilder.prototype._buildExpressionWithObject = function(expr, object) {
      var key, parsedValue, value, _results;
      _results = [];
      for (key in object) {
        value = object[key];
        if (value instanceof Object) {
          _results.push(expr.and(this.build(value)));
        } else {
          parsedValue = this._parseValue(value);
          if (parsedValue) {
            _results.push(expr.and(key + ' ' + parsedValue));
          } else {
            _results.push(expr.and(key + ' = ' + this._escapeValue(value)));
          }
        }
      }
      return _results;
    };

    SQLConditionBuilder.prototype._parseValue = function(value) {
      var f, _i, _len, _ref;
      _ref = this.valueFormatters;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        if (f.format instanceof RegExp && f.format.test(value)) {
          return f.fn(value);
        } else if (value === f.format || (value && (typeof value.indexOf === "function" ? value.indexOf(f.format) : void 0) === 0)) {
          return f.fn(value);
        }
      }
      return null;
    };

    SQLConditionBuilder.prototype.registerValueFormatter = function(formatOrPrefix, formatterFunction) {
      return this.valueFormatters.push({
        format: formatOrPrefix,
        fn: formatterFunction
      });
    };

    SQLConditionBuilder.prototype._escapeValue = function(value) {
      if (typeof value !== 'string') {
        return value;
      }
      return this._wrapStringValue(value.replace(/\'/g, '\\\''));
    };

    SQLConditionBuilder.prototype._wrapStringValue = function(value) {
      if (value[0] === '`') {
        return value;
      }
      return "'" + value + "'";
    };

    return SQLConditionBuilder;

  })(Object);

  module.exports = SQLConditionBuilder;

}).call(this);
